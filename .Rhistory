RNA_clin_data$Surv_event[i] <- 0
}
if (isTRUE(is.na(RNA_clin_data$vital_status[i]) != T) &
RNA_clin_data$vital_status[i] %in% c("dead", "Died of Disease") == T) {
RNA_clin_data$Surv_event[i] <- 1
}
}
}
# Display the unique values of the engineered features
print(unique(RNA_clin_data[feature]))
}
colnames(RNA_clin_data)
t(train_mad)[1:10,1:10]
# Principal components analysis
x_train <- prcomp(t(train_mad), scale = T)
scree_plot <- fviz_eig(x_train, addlabels=TRUE)
scree_plot
orig_IDs_train <-
matrix(row.names(x_train[["x"]]), ncol = 1) # we store the original IDs
short_IDs_train <-
as.character(matrix(data = 1:nrow(x_train[["x"]]), ncol = 1)) # we store the short IDs
IDs_train <-
cbind(orig_IDs_train, short_IDs_train) # we bind them in the same matrix
x_train[["IDs"]] <-
IDs_train # We append the new IDs matrix to the x list
# train
fviz_pca_ind(
x_train,
col.ind = "cos2",
# Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = T,
# Avoid text overlapping,
max.overlaps = Inf
)
vals_to_check <- as.factor(RNA_clin_data$race)
# PC1 vs PC2
plot(
x_train$rotation[, 1],
x_train$rotation[, 2],
xlab = "PCA component 1",
ylab = "PCA component 2",
col = vals_to_check
)
# PC2 vs PC3
plot(
x_train$rotation[, 3],
x_train$rotation[, 4],
xlab = "PCA component 3",
ylab = "PCA component 4",
col = vals_to_check
)
# PC3 vs PC4
plot(
x_train$rotation[, 5],
x_train$rotation[, 6],
xlab = "PCA component 5",
ylab = "PCA component 6",
col = vals_to_check
)
# Define a variable with the PCs to keep
PCs_to_keep = 285
# Print the cumulative variance of a range of PCs
summary(x_train)$importance[3, 1:PCs_to_keep][PCs_to_keep]
x_train[["x"]][, 1:PCs_to_keep]
t(x_train[["x"]][, 1:PCs_to_keep])
x_train[["x"]][, 1:PCs_to_keep]
library(dplyr)
# Change gene expression data type to numeric
x_train[["x"]] <-
mutate_all(as.data.frame(x_train[["x"]]), function(x)
as.numeric(as.character(x)))
# Pass the gene expression data frame to perform consensus clustering
# Where each row is a sample and each column is a PC.
res_train <- M3C(
x_train[["x"]][, 1:PCs_to_keep],
removeplots = TRUE,
iters = 50,
fsize = 8,
lthick = 1,
dotsize = 1.25
)
optimal_k_pac_train = max(res_train[["assignments"]])
res_train[["assignments"]]
# train
res_train$scores
View(res_train)
library(dplyr)
# Change gene expression data type to numeric
x_train[["x"]] <-
mutate_all(as.data.frame(x_train[["x"]]), function(x)
as.numeric(as.character(x)))
# Pass the gene expression data frame to perform consensus clustering
# Where each row is a PC and each column is a sample.
res_train <- M3C(
t(x_train[["x"]][, 1:PCs_to_keep]),
removeplots = TRUE,
iters = 50,
fsize = 8,
lthick = 1,
dotsize = 1.25
)
optimal_k_pac_train = max(res_train[["assignments"]])
View(res_train)
# train
res_train$scores
res_train$plots[[1]]
res_train$plots[[2]]
res_train$plots[[4]]
res_train$plots[[3]]
# RNA-seq data and cluster annotation
RNA_seq_data <-
res_train$realdataresults[[optimal_k_pac_train]][["ordered_data"]]
RNA_seq_cluster_annotation <-
res_train$realdataresults[[optimal_k_pac_train]][["ordered_annotation"]]
# Joining expression and cluster annotation
RNA_seq_merged <-
as.data.frame(t(rbind(
RNA_seq_data, t(RNA_seq_cluster_annotation)
)))
RNA_seq_merged_allgenes <-
as.data.frame(merge(t(train_mad), RNA_seq_cluster_annotation, by = "row.names"))
rownames(RNA_seq_merged_allgenes) <-
RNA_seq_merged_allgenes$Row.names
RNA_seq_merged_allgenes = subset(RNA_seq_merged_allgenes, select = -c(`Row.names`))
# Clinical data
RNA_clin_data <-
merge(RNA_clin_data, RNA_seq_cluster_annotation, by = "row.names")
rownames(RNA_clin_data) <- RNA_clin_data$Row.names
k_clusters_train = 3
data_train <-
res_train$realdataresults[[k_clusters_train]]$ordered_data
annon_train <-
res_train$realdataresults[[k_clusters_train]]$ordered_annotation
ccmatrix_train <-
res_train$realdataresults[[k_clusters_train]]$consensus_matrix
library(ComplexHeatmap)
ccl <- list()
ha_row <- list()
x <- c(
"skyblue",
"gold",
"violet",
"darkorchid",
"slateblue",
"forestgreen",
"violetred",
"orange",
"midnightblue",
"grey31",
"black"
)
names(x) <- as.character(seq(1, 11, by = 1))
for (i in seq(2, k_clusters_train)) {
# get cc matrix and labels
ccmatrix <- res_train$realdataresults[[i]]$consensus_matrix
db_source <- as.data.frame(RNA_clin_data[
c(rownames(res_train$realdataresults[[i]]$ordered_annotation)),
"source_db"])
rownames(db_source) <-
c(rownames(res_train$realdataresults[[i]]$ordered_annotation))
colnames(db_source) <- c("db_source")
annon <- res_train$realdataresults[[i]]$ordered_annotation
# do heatmap
n <- 10
seq <- rev(seq(0, 255,
by = 255 / (n)))
palRGB <- cbind(seq,
seq, 255)
mypal <- rgb(palRGB,
maxColorValue = 255)
ha = HeatmapAnnotation(
df = data.frame(Cluster = as.character(annon[, 1])),
Source = as.character(db_source[, 1]),
col = list(
Cluster = x,
Source = c(
"TCGA_RNAseq" = "green",
"Ref2_RNAseq" = "red",
"RefGSE20271_Array" = "blue",
"RefGSE575678_Array" = "pink",
"Ref4_RNAseq" = "yellow"
)
)
)
ccl[[i]] <- Heatmap(
ccmatrix,
name = "Consensus_index",
top_annotation = ha,
col = mypal,
show_row_dend = FALSE,
show_column_dend = FALSE,
cluster_rows = FALSE,
cluster_columns = FALSE,
show_column_names = FALSE
)
}
print(ccl)
k_train <- kmeans(x_train[["x"]][,1:PCs_to_keep],
centers = k_clusters_train)
# Add clusters obtained using the K-means algorithm
x_train$cluster <- factor(k_train$cluster)
eigenvalue <- round(get_eigenvalue(x_train), 1)
variance.percent_train <- eigenvalue$variance.percent
library(ggpubr)
library(dplyr)
temp <- do.call("cbind", list(x_train[["x"]][,1:PCs_to_keep],as.data.frame(x_train$cluster)))
ggscatter(
temp,
x = "PC1",
y = "PC2",
color = "x_train$cluster",
palette = "npg",
ellipse = TRUE,
ellipse.type = "convex",
size = 1.5,
legend = "right",
ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent_train[1], "% )"),
ylab = paste0("Dim 2 (", variance.percent_train[2], "% )")
) +
stat_mean(aes(color = `x_train$cluster`), size = 4)
# setting the dataframes in a list
list_of_data = list(temp, RNA_clin_data)
# this will get the intersection of the row.names for everything in the list
common_names = Reduce(intersect, lapply(list_of_data, row.names))
common_names
library(ggrepel)
library(factoextra)
library(ggpubr)
temp <- temp[row.names(temp) %in% common_names,]
histological_type <- as.factor(RNA_clin_data$histological_type)
temp$histological_type <- histological_type
histological_grade <- as.factor(RNA_clin_data$histological_grade)
temp$histological_grade <- histological_grade
source_db <- as.factor(RNA_clin_data$source_db)
temp$source_db <- source_db
ggscatter(
temp,
x = "PC1",
y = "PC2",
palette = "npg",
ellipse = TRUE,
ellipse.type = "convex",
size = 1.5,
legend = "right",
ggtheme = theme_bw(),
color = "source_db",
xlab = paste0("Dim 1 (", variance.percent_train[1], "% )"),
ylab = paste0("Dim 2 (", variance.percent_train[2], "% )")
)
library(glue)
for (vars in c(
"age_label",
"race",
"histological_grade",
"histological_type",
"tumor_size",
"response_to_treatment",
"pathological_history",
"family_pathological_hsitory",
"age",
"tumor_size_mm",
"age_at_menarche",
"treatment",
"vital_status",
"chemotherapy",
"Surv_event",
"met_bone",
"Relapse",
"Surv_months",
"methastasis"
)) {
var1 <- as.data.frame(table(clin_data1[vars]))
cluster_info <- as.data.frame(rep("1",
nrow(var1)))
var1 <- cbind(cluster_info,
var1)
colnames(var1) <- c("cluster_info",
"variable",
"count")
var2 <- as.data.frame(table(clin_data2[vars]))
cluster_info <- as.data.frame(rep("2",
nrow(var2)))
var2 <- cbind(cluster_info, var2)
colnames(var2) <- c("cluster_info",
"variable",
"count")
var3 <- as.data.frame(table(clin_data3[vars]))
cluster_info <- as.data.frame(rep("3",
nrow(var3)))
var3 <- cbind(cluster_info, var3)
colnames(var3) <- c("cluster_info",
"variable",
"count")
merged_df <- rbind(var1,
var2,
var3)
merged_df
## PLOTS
library(ggplot2)
# Grouped barcharts
plt <- ggplot(merged_df,
aes(x = cluster_info,
y = count,
fill = variable)) +
geom_bar(position = "dodge",
stat = "identity")+
stat_compare_means()+
labs(title = as.character(vars))
if (vars %in% c("age",
"tumor_size_mm",
"age_at_menarche",
"Surv_months")) {
merged_df <- rbind(clin_data1[c("consensuscluster", vars)],
clin_data2[c("consensuscluster", vars)],
clin_data3[c("consensuscluster", vars)])
colnames(merged_df) <- c("consensuscluster",
"vars")
plt <- ggboxplot(merged_df,
x="consensuscluster",
y="vars",
color = "consensuscluster",
ggtheme = theme_gray(),
add='jitter') +
stat_compare_means() +
labs(title = as.character(vars)) +
xlab("Cluster") + ylab(vars)
}
print(plt)
}
clin_data1 <-
RNA_clin_data[which(RNA_clin_data["consensuscluster"] == 1),]
clin_data2 <-
RNA_clin_data[which(RNA_clin_data["consensuscluster"] == 2),]
clin_data3 <-
RNA_clin_data[which(RNA_clin_data["consensuscluster"] == 3),]
library(glue)
for (vars in c(
"age_label",
"race",
"histological_grade",
"histological_type",
"tumor_size",
"response_to_treatment",
"pathological_history",
"family_pathological_hsitory",
"age",
"tumor_size_mm",
"age_at_menarche",
"treatment",
"vital_status",
"chemotherapy",
"Surv_event",
"met_bone",
"Relapse",
"Surv_months",
"methastasis"
)) {
var1 <- as.data.frame(table(clin_data1[vars]))
cluster_info <- as.data.frame(rep("1",
nrow(var1)))
var1 <- cbind(cluster_info,
var1)
colnames(var1) <- c("cluster_info",
"variable",
"count")
var2 <- as.data.frame(table(clin_data2[vars]))
cluster_info <- as.data.frame(rep("2",
nrow(var2)))
var2 <- cbind(cluster_info, var2)
colnames(var2) <- c("cluster_info",
"variable",
"count")
var3 <- as.data.frame(table(clin_data3[vars]))
cluster_info <- as.data.frame(rep("3",
nrow(var3)))
var3 <- cbind(cluster_info, var3)
colnames(var3) <- c("cluster_info",
"variable",
"count")
merged_df <- rbind(var1,
var2,
var3)
merged_df
## PLOTS
library(ggplot2)
# Grouped barcharts
plt <- ggplot(merged_df,
aes(x = cluster_info,
y = count,
fill = variable)) +
geom_bar(position = "dodge",
stat = "identity")+
stat_compare_means()+
labs(title = as.character(vars))
if (vars %in% c("age",
"tumor_size_mm",
"age_at_menarche",
"Surv_months")) {
merged_df <- rbind(clin_data1[c("consensuscluster", vars)],
clin_data2[c("consensuscluster", vars)],
clin_data3[c("consensuscluster", vars)])
colnames(merged_df) <- c("consensuscluster",
"vars")
plt <- ggboxplot(merged_df,
x="consensuscluster",
y="vars",
color = "consensuscluster",
ggtheme = theme_gray(),
add='jitter') +
stat_compare_means() +
labs(title = as.character(vars)) +
xlab("Cluster") + ylab(vars)
}
print(plt)
}
library(glue)
for (vars in c(
"age_label",
"race",
"histological_grade",
"histological_type",
"tumor_size",
"response_to_treatment",
"pathological_history",
"family_pathological_hsitory",
"age",
"tumor_size_mm",
"age_at_menarche",
"treatment",
"vital_status",
"chemotherapy",
"Surv_event",
"met_bone",
"Relapse",
"Surv_months",
"methastasis"
)) {
var1 <- as.data.frame(table(clin_data1[vars]))
cluster_info <- as.data.frame(rep("1",
nrow(var1)))
var1 <- cbind(cluster_info,
var1)
var1_perc <- var1
var1_perc$Freq <-  (var1$Freq/sum(var1$Freq))
colnames(var1) <- c("cluster_info",
"variable",
"count")
colnames(var1_perc) <- c("cluster_info",
"variable",
"percentage")
var2 <- as.data.frame(table(clin_data2[vars]))
cluster_info <- as.data.frame(rep("2",
nrow(var2)))
var2 <- cbind(cluster_info, var2)
var2_perc <- var2
var2_perc$Freq <-  (var2$Freq/sum(var2$Freq))
colnames(var2) <- c("cluster_info",
"variable",
"count")
colnames(var2_perc) <- c("cluster_info",
"variable",
"percentage")
var3 <- as.data.frame(table(clin_data3[vars]))
cluster_info <- as.data.frame(rep("3",
nrow(var3)))
var3 <- cbind(cluster_info, var3)
var3_perc <- var3
var3_perc$Freq <-  (var3$Freq/sum(var3$Freq))
colnames(var3) <- c("cluster_info",
"variable",
"count")
colnames(var3_perc) <- c("cluster_info",
"variable",
"percentage")
merged_df <- rbind(var1_perc,
var2_perc,
var3_perc)
merged_df
## PLOTS
library(ggplot2)
# Grouped barcharts
plt <- ggplot(merged_df,
aes(x = cluster_info,
y = percentage,
fill = variable)) +
geom_bar(position = "dodge",
stat = "identity")+
stat_compare_means()+
labs(title = as.character(vars)) + scale_y_continuous(labels = scales::percent)
if (vars %in% c("age",
"tumor_size_mm",
"age_at_menarche",
"Surv_months")) {
merged_df <- rbind(clin_data1[c("consensuscluster", vars)],
clin_data2[c("consensuscluster", vars)],
clin_data3[c("consensuscluster", vars)])
colnames(merged_df) <- c("consensuscluster",
"vars")
plt <- ggboxplot(merged_df,
x="consensuscluster",
y="vars",
color = "consensuscluster",
ggtheme = theme_gray(),
add='jitter') +
stat_compare_means() +
labs(title = as.character(vars)) +
xlab("Cluster") + ylab(vars)
}
print(plt)
}
